// src/App.js
import React, { useState, useEffect } from "react";
import TankList from "./components/TankList";
import SensorDetail from "./components/SensorDetail";
import axios from "axios";
import { LineChart } from "@mui/x-charts/LineChart";
import { bool } from "prop-types";
import Box from "@mui/material/Box";
import InputLabel from "@mui/material/InputLabel";
import MenuItem from "@mui/material/MenuItem";
import FormControl from "@mui/material/FormControl";
import Select from "@mui/material/Select";
import { timeSaturday } from "d3-time";

var timestamps = [];
var temperature = [];
// false means off/bad; true means on/good; intialize to off/bad
var floatBinary = false;
var powerBinary = false;
var floatString = "bad";
var powerString = "off";
var waterLevelStatusClass = "";
var powerStatusClass = "";
var tankName;
var tankSpecies;
var currTimeFrame = 2;
var totalDataPoints = 24;

const App = () => {
  useEffect(() => {
    // Add a class to the body element
    document.body.classList.add("paf-app");

    // Create a link element
    const link = document.createElement("link");

    const favicon = document.createElement("link");
    favicon.href =
      "https://www.thepaf.org/wp-content/uploads/2023/04/favicon-32x32-1.png";

    // Update the document title
    document.title = "PAF Data Hub";
    favicon.rel = "icon";
    link.rel = "stylesheet";
    link.href = "https://fonts.googleapis.com/css?family=Red+Hat+Display"; // Replace with the actual path

    // Append the link element to the head of the document
    document.head.appendChild(link);
    document.head.appendChild(favicon);

    // Clean up the class when the component unmounts
    return () => {
      document.body.classList.remove("paf-app");
      document.head.removeChild(link);
    };
  }, []); // Empty dependency array ensures this effect runs once after the initial render
  const [tankList, setTankList] = useState([
    {
      id: 1,
      species: "SM8_A",
      name: "F1",
      sensors: [
        {
          name: "Sensor A",
          data: [(1, 2), (3, 4), (5, 6)],
        },
        {
          name: "Sensor B",
          data: [
            /* mock data for Sensor B */
          ],
        },
        {
          name: "Sensor C",
          data: [
            /* mock data for Sensor C */
          ],
        },
      ],
    },
    {
      id: 2,
      species: "SM8_B",
      name: "F2",
      sensors: [
        {
          name: "Sensor X",
          data: [
            /* mock data for Sensor X */
          ],
        },
        {
          name: "Sensor Y",
          data: [
            /* mock data for Sensor Y */
          ],
        },
      ],
    },
    {
      id: 3,
      species: "SW",
      name: "F3",
      sensors: [
        {
          name: "Sensor X",
          data: [
            /* mock data for Sensor X */
          ],
        },
        {
          name: "Sensor Y",
          data: [
            /* mock data for Sensor Y */
          ],
        },
      ],
    },
    {
      id: 4,
      species: "Bleach",
      name: "F4",
      sensors: [
        {
          name: "Sensor X",
          data: [
            /* mock data for Sensor X */
          ],
        },
        {
          name: "Sensor Y",
          data: [
            /* mock data for Sensor Y */
          ],
        },
      ],
    },
    {
      id: 5,
      species: "Limu",
      name: "F5",
      sensors: [
        {
          name: "Sensor X",
          data: [
            /* mock data for Sensor X */
          ],
        },
        {
          name: "Sensor Y",
          data: [
            /* mock data for Sensor Y */
          ],
        },
      ],
    },
    {
      id: 6,
      species: "SM5_B",
      name: "F6",
      sensors: [
        {
          name: "Sensor X",
          data: [
            /* mock data for Sensor X */
          ],
        },
        {
          name: "Sensor Y",
          data: [
            /* mock data for Sensor Y */
          ],
        },
      ],
    },
    {
      id: 7,
      species: "Limu",
      name: "F7",
      sensors: [
        {
          name: "Sensor X",
          data: [
            /* mock data for Sensor X */
          ],
        },
        {
          name: "Sensor Y",
          data: [
            /* mock data for Sensor Y */
          ],
        },
      ],
    },
    {
      id: 8,
      species: "A3",
      name: "F8",
      sensors: [
        {
          name: "Sensor X",
          data: [
            /* mock data for Sensor X */
          ],
        },
        {
          name: "Sensor Y",
          data: [
            /* mock data for Sensor Y */
          ],
        },
      ],
    },
    {
      id: 9,
      species: "SM3",
      name: "F9",
      sensors: [
        {
          name: "Sensor X",
          data: [
            /* mock data for Sensor X */
          ],
        },
        {
          name: "Sensor Y",
          data: [
            /* mock data for Sensor Y */
          ],
        },
      ],
    },
    {
      id: 10,
      species: "SM5_A",
      name: "F10",
      sensors: [
        {
          name: "Sensor X",
          data: [
            /* mock data for Sensor X */
          ],
        },
        {
          name: "Sensor Y",
          data: [
            /* mock data for Sensor Y */
          ],
        },
      ],
    },
    {
      id: 11,
      species: "SM5_A",
      name: "F11",
      sensors: [
        {
          name: "Sensor X",
          data: [
            /* mock data for Sensor X */
          ],
        },
        {
          name: "Sensor Y",
          data: [
            /* mock data for Sensor Y */
          ],
        },
      ],
    },
    {
      id: 12,
      species: "SM5_A",
      name: "F12",
      sensors: [
        {
          name: "Sensor X",
          data: [
            /* mock data for Sensor X */
          ],
        },
        {
          name: "Sensor Y",
          data: [
            /* mock data for Sensor Y */
          ],
        },
      ],
    },
    {
      id: 13,
      species: "Bleach",
      name: "F13",
      sensors: [
        {
          name: "Sensor X",
          data: [
            /* mock data for Sensor X */
          ],
        },
        {
          name: "Sensor Y",
          data: [
            /* mock data for Sensor Y */
          ],
        },
      ],
    },
    {
      id: 14,
      species: "SM9_A",
      name: "F14",
      sensors: [
        {
          name: "Sensor X",
          data: [
            /* mock data for Sensor X */
          ],
        },
        {
          name: "Sensor Y",
          data: [
            /* mock data for Sensor Y */
          ],
        },
      ],
    },
    {
      id: 15,
      species: "SM1_A",
      name: "F15",
      sensors: [
        {
          name: "Sensor X",
          data: [
            /* mock data for Sensor X */
          ],
        },
        {
          name: "Sensor Y",
          data: [
            /* mock data for Sensor Y */
          ],
        },
      ],
    },
    {
      id: 16,
      species: "Bleach",
      name: "F16",
      sensors: [
        {
          name: "Sensor X",
          data: [
            /* mock data for Sensor X */
          ],
        },
        {
          name: "Sensor Y",
          data: [
            /* mock data for Sensor Y */
          ],
        },
      ],
    },
    {
      id: 17,
      species: "SM1_B",
      name: "F17",
      sensors: [
        {
          name: "Sensor P",
          data: [
            /* mock data for Sensor P */
          ],
        },
        {
          name: "Sensor Q",
          data: [
            /* mock data for Sensor Q */
          ],
        },
      ],
    },
    {
      id: 18,
      species: "Limu",
      name: "F18",
      sensors: [
        {
          name: "Sensor P",
          data: [
            /* mock data for Sensor P */
          ],
        },
        {
          name: "Sensor Q",
          data: [
            /* mock data for Sensor Q */
          ],
        },
      ],
    },
    {
      id: 19,
      species: "A2",
      name: "F19",
      sensors: [
        {
          name: "Sensor P",
          data: [
            /* mock data for Sensor P */
          ],
        },
        {
          name: "Sensor Q",
          data: [
            /* mock data for Sensor Q */
          ],
        },
      ],
    },
    {
      id: 20,
      species: "Bleach",
      name: "F20",
      sensors: [
        {
          name: "Sensor P",
          data: [
            /* mock data for Sensor P */
          ],
        },
        {
          name: "Sensor Q",
          data: [
            /* mock data for Sensor Q */
          ],
        },
      ],
    },
    {
      id: 21,
      species: "SM2_A",
      name: "F21",
      sensors: [
        {
          name: "Sensor P",
          data: [
            /* mock data for Sensor P */
          ],
        },
        {
          name: "Sensor Q",
          data: [
            /* mock data for Sensor Q */
          ],
        },
      ],
    },
    {
      id: 22,
      species: "SM2_B",
      name: "F22",
      sensors: [
        {
          name: "Sensor P",
          data: [
            /* mock data for Sensor P */
          ],
        },
        {
          name: "Sensor Q",
          data: [
            /* mock data for Sensor Q */
          ],
        },
      ],
    },
    {
      id: 23,
      species: "SM7",
      name: "F23",
      sensors: [
        {
          name: "Sensor P",
          data: [
            /* mock data for Sensor P */
          ],
        },
        {
          name: "Sensor Q",
          data: [
            /* mock data for Sensor Q */
          ],
        },
      ],
    },
    {
      id: 24,
      species: "Limu",
      name: "F24",
      sensors: [
        {
          name: "Sensor P",
          data: [
            /* mock data for Sensor P */
          ],
        },
        {
          name: "Sensor Q",
          data: [
            /* mock data for Sensor Q */
          ],
        },
      ],
    },
    {
      id: 25,
      species: "Limu",
      name: "F25",
      sensors: [
        {
          name: "Sensor P",
          data: [
            /* mock data for Sensor P */
          ],
        },
        {
          name: "Sensor Q",
          data: [
            /* mock data for Sensor Q */
          ],
        },
      ],
    },
    {
      id: 26,
      species: "A1_A",
      name: "F26",
      sensors: [
        {
          name: "Sensor P",
          data: [
            /* mock data for Sensor P */
          ],
        },
        {
          name: "Sensor Q",
          data: [
            /* mock data for Sensor Q */
          ],
        },
      ],
    },
  ]);
  const [selectedTank, setSelectedTank] = useState(null);

  const handleTankClick = (tank) => {
    const dataEx = require("./data/sensaphone_ex2.json");
    //console.log("data");
    //console.log(dataEx);
    //console.log("done");

    const sensaphoneData = dataEx.sensaphone_data;
    console.log(sensaphoneData);
    // Check if sensaphoneData is an array before using forEach
    if (Array.isArray(sensaphoneData)) {
      sensaphoneData.forEach((item, index) => {
        //console.log(`Data point ${index + 1}:`);
        //console.log("Timestamp:", item.timestamp);
        timestamps[index] = new Date(item.timestamp).getTime();
        //console.log("Temperature (Celsius):", item.temperature_celsius);
        temperature[index] = item.temperature_celsius;
        //console.log("Float Sensor:", item.float_sensor);
        //console.log("Power Sensor:", item.power_sensor);
        //console.log("------------------------");
        floatBinary = item.float_sensor;
        powerBinary = item.power_sensor;
      });
    } else {
      console.error("Invalid data format. sensaphone_data is not an array.");
    }
    setSelectedTank(tank);
    console.log(tank.species);
    tankSpecies = tank.species;
    tankName = tank.name;

    console.log(typeof timestamps[0]);
    console.log(temperature);
    console.log(tank.id);
    if (floatBinary == true) {
      floatString = "good";
      waterLevelStatusClass = "--good";
    } else {
      floatString = "bad";
      waterLevelStatusClass = "--bad";
    }

    if (powerBinary == true) {
      powerString = "on";
      powerStatusClass = "--good";
    } else {
      powerString = "off";
      powerStatusClass = "--bad";
    }
  };

  const handleBackClick = () => {
    setSelectedTank(null);
  };

  const customize = {
    height: 300,
    legend: { hidden: true },
    margin: { top: 5 },
    stackingOrder: "descending",
  };
  const [cTF, setCTF] = React.useState(2);

  const handleChange = (event) => {
    currTimeFrame = event.target.value;
    console.log(currTimeFrame);
    setCTF(event.target.value);
    console.log(cTF);
    totalDataPoints = (currTimeFrame * 60) / 5;
    console.log(totalDataPoints);
    temperature = temperature.slice(0, totalDataPoints);
    timestamps = timestamps.slice(0, totalDataPoints);
  };
  console.log("CTF");
  console.log(cTF);
  console.log(totalDataPoints);
  console.log(temperature.slice(0, totalDataPoints));
  console.log(timestamps.slice(0, totalDataPoints));

  temperature = temperature.slice(0, totalDataPoints);
  timestamps = timestamps.slice(0, totalDataPoints);

  const [inputValue, setInputValue] = useState("");
  const handleInputChange = (event) => {
    setInputValue(event.target.value);
  };

  return (
    <div className="container-fluid">
      <nav className="paf-nav">
        <h1 className="paf-title">WaiKilo Kōkua</h1>
        <a
          href="#"
          className="btn tanks-button nav-button"
          onClick={handleBackClick}
        >
          <svg
            width="38"
            height="42"
            viewBox="0 0 38 42"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M10.6663 10.9416V10.9624M27.333 27.6082V27.6291M16.558 16.8332C17.7237 15.6679 18.5176 14.183 18.8394 12.5665C19.1611 10.9499 18.9962 9.2742 18.3656 7.75133C17.7349 6.22847 16.6668 4.92683 15.2964 4.01104C13.9259 3.09525 12.3146 2.60645 10.6663 2.60645C9.01806 2.60645 7.4068 3.09525 6.03633 4.01104C4.66587 4.92683 3.59776 6.22847 2.96711 7.75133C2.33645 9.2742 2.17157 10.9499 2.49332 12.5665C2.81507 14.183 3.60899 15.6679 4.77468 16.8332L10.6663 22.727L16.558 16.8332ZM33.2247 33.4999C34.3904 32.3346 35.1843 30.8497 35.506 29.2331C35.8278 27.6165 35.6629 25.9409 35.0322 24.418C34.4016 22.8951 33.3335 21.5935 31.963 20.6777C30.5926 19.7619 28.9813 19.2731 27.333 19.2731C25.6847 19.2731 24.0735 19.7619 22.703 20.6777C21.3325 21.5935 20.2644 22.8951 19.6338 24.418C19.0031 25.9409 18.8382 27.6165 19.16 29.2331C19.4817 30.8497 20.2757 32.3346 21.4413 33.4999L27.333 39.3936L33.2247 33.4999Z"
              stroke="black"
              stroke-width="4.16667"
              stroke-linecap="round"
              stroke-linejoin="round"
            />
          </svg>
          <span className="sr-only">Tanks</span>
        </a>
        <a href="#" className="btn qr-button nav-button">
          <svg
            width="38"
            height="38"
            viewBox="0 0 38 38"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fill-rule="evenodd"
              clip-rule="evenodd"
              d="M12.75 0.25H0.25V12.75H4.41667V4.41667H12.75V0.25ZM0.25 37.75V25.25H4.41667V33.5833H12.75V37.75H0.25ZM25.25 0.25V4.41667H33.5833V12.75H37.75V0.25H25.25ZM33.5833 25.25H37.75V37.75H25.25V33.5833H33.5833V25.25ZM8.58333 8.58333H16.9167V16.9167H8.58333V8.58333ZM8.58333 21.0833H16.9167V29.4167H8.58333V21.0833ZM29.4167 8.58333H21.0833V16.9167H29.4167V8.58333ZM21.0833 21.0833H29.4167V29.4167H21.0833V21.0833Z"
              fill="black"
            />
          </svg>

          <span className="sr-only">QR</span>
        </a>
      </nav>
      <div className="row">
        {/* Show the list and detail view on larger screens */}
        <div className="col">
          {/* Show the detail view when a tank is selected */}
          {selectedTank && (
            <section className="sensor-detail__content">
              <header className="sensor-detail__tank">
                <div className="flex-row">
                  <div className="flex-column flex-grow">
                    <h2 className="sensor-detail__tank-name">
                      Tank {tankName}
                    </h2>
                    <div className="sensor-detail__tank-species">
                      {tankSpecies}
                    </div>
                  </div>
                  <svg
                    width="48"
                    height="48"
                    viewBox="0 0 48 48"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M12.9231 8C10.2092 8 8 10.2092 8 12.9231V35.0769C8 37.7908 10.2092 40 12.9231 40H28.9231C30.2314 40 32.048 38.1108 34.1538 35.9618C34.4492 35.6615 34.7323 35.3797 35.0388 35.0769C35.3415 34.7717 35.6615 34.4492 35.9618 34.1538C38.112 32.0468 40 30.2314 40 28.9231V12.9231C40 10.2092 37.7908 8 35.0769 8H12.9231ZM12.9231 10.4615H35.0769C35.7298 10.4615 36.3559 10.7209 36.8175 11.1825C37.2791 11.6441 37.5385 12.2702 37.5385 12.9231V28.9231C37.5385 30.1477 36.3052 30.1538 35.0769 30.1538H31.3846C30.7065 30.1538 30.1538 30.7065 30.1538 31.3846V35.1545C30.1538 36.2462 30.1563 37.312 29.2689 37.5385H12.9231C12.2702 37.5385 11.6441 37.2791 11.1825 36.8175C10.7209 36.3559 10.4615 35.7298 10.4615 35.0769V12.9231C10.4615 12.2702 10.7209 11.6441 11.1825 11.1825C11.6441 10.7209 12.2702 10.4615 12.9231 10.4615ZM16.3852 17.8462C16.0588 17.8767 15.7579 18.0356 15.5487 18.288C15.3394 18.5404 15.239 18.8656 15.2695 19.192C15.3001 19.5184 15.459 19.8193 15.7114 20.0286C15.9638 20.2378 16.289 20.3382 16.6154 20.3077H31.3846C31.711 20.3077 32.0241 20.178 32.2549 19.9472C32.4857 19.7164 32.6154 19.4033 32.6154 19.0769C32.6154 18.7505 32.4857 18.4375 32.2549 18.2066C32.0241 17.9758 31.711 17.8462 31.3846 17.8462H16.6154C16.5768 17.8443 16.5382 17.8443 16.4997 17.8462C16.4616 17.8444 16.4234 17.8444 16.3852 17.8462ZM16.3852 24C16.2236 24.0151 16.0665 24.0619 15.923 24.1377C15.7795 24.2135 15.6523 24.3169 15.5487 24.4419C15.3394 24.6943 15.239 25.0194 15.2695 25.3458C15.3001 25.6723 15.459 25.9732 15.7114 26.1824C15.9638 26.3917 16.289 26.4921 16.6154 26.4615H28.9231C29.2495 26.4615 29.5625 26.3319 29.7934 26.1011C30.0242 25.8702 30.1538 25.5572 30.1538 25.2308C30.1538 24.9044 30.0242 24.5913 29.7934 24.3605C29.5625 24.1297 29.2495 24 28.9231 24H16.6154C16.5768 23.9982 16.5382 23.9982 16.4997 24C16.4616 23.9982 16.4234 23.9982 16.3852 24Z"
                      fill="#363636"
                    />
                    <circle cx="38.5" cy="8.5" r="5.5" fill="#363636" />
                  </svg>
                </div>
                <div className="paf-input-wrapper">
                  <label className="sr-only" htmlFor="myInput">
                    enter note
                  </label>
                  <input
                    type="text"
                    id="myInput"
                    placeholder="enter note"
                    value={inputValue}
                    onChange={handleInputChange}
                    className="paf-input"
                  />
                </div>
              </header>
              {/* <header className="sensor-detail__tank">
                <Box sx={{ minWidth: 120 }}>
                  <FormControl fullWidth>
                    <InputLabel id="demo-simple-select-label">
                      Time Frame
                    </InputLabel>
                    <Select
                      labelId="demo-simple-select-label"
                      id="demo-simple-select"
                      value={currTimeFrame}
                      label="Time Frame"
                      onChange={handleChange}
                    >
                      <MenuItem value={2}>2 Hours</MenuItem>
                      <MenuItem value={12}>12 Hours</MenuItem>
                      <MenuItem value={24}>24 Hours</MenuItem>
                    </Select>
                  </FormControl>
                </Box>
              </header> */}
              <div className="sensor-detail__temperature">
                <h2>Temp °C</h2>
                <LineChart
                  xAxis={[
                    {
                      data: timestamps,
                      scaleType: "time",
                      label: "Time",
                      hideTooltip: true,
                    },
                  ]}
                  series={[
                    {
                      data: temperature,
                      scaleType: "linear",
                    },
                  ]}
                  dataset={
                    require("./data/sensaphone_ex1.json").sensaphone_data
                  }
                  {...customize}
                />
              </div>
              <div className="sensor-detail__sensors--row">
                <div className={"sensor__water " + waterLevelStatusClass}>
                  <h2>
                    Water Level
                    {/* <span>{floatString}</span> */}
                  </h2>
                  <svg
                    width="73"
                    height="73"
                    viewBox="0 0 100% 100%"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M71.1626 31.1045C71.5779 33.5729 71.6178 38.5456 71.2379 41.1603C70.4961 46.2675 68.5384 51.584 66.0348 55.3773C60.7088 63.4471 52.4419 69.0948 43.4799 70.8447C38.4074 71.8353 32.5187 71.6938 27.787 70.4816C21.879 68.9681 16.2441 65.7164 11.7556 61.2122L10.6931 62.271L11.7556 61.2122C9.58607 59.0351 8.38943 57.5465 6.87284 55.1491C6.37685 54.3649 5.71365 53.1694 5.13551 52.0434C4.53277 50.8695 4.11262 49.9439 4.02126 49.6377C3.93115 49.3357 3.68328 48.6268 3.47315 48.0588L3.47313 48.0587C2.87942 46.4541 2.23766 44.0437 1.91243 42.1836C1.52131 39.9457 1.37344 35.2837 1.62173 33.1224C2.63444 24.3067 6.09794 17.1705 12.1397 11.3614C18.0187 5.70885 25.4809 2.28487 33.2355 1.64913L33.2355 1.64913C34.0753 1.58026 35.5446 1.51339 36.474 1.50218L36.4579 0.168908L36.474 1.50218C43.3562 1.41913 50.7243 3.71149 56.4901 7.74081L56.4902 7.74087C56.8187 7.97038 57.1233 8.1873 57.3483 8.35082C57.4617 8.43319 57.5495 8.49817 57.6082 8.54274C57.6167 8.54918 57.6239 8.55474 57.6301 8.5595M71.1626 31.1045L72.6418 30.8556L71.1626 31.1046C71.1626 31.1046 71.1626 31.1045 71.1626 31.1045ZM71.1626 31.1045C70.1406 25.032 67.6531 19.4073 63.9229 14.7124L63.9229 14.7123C62.8583 13.3723 60.236 10.7154 58.908 9.63146L58.908 9.63142C58.5907 9.37239 58.292 9.12545 58.0655 8.93548C57.9528 8.84097 57.8543 8.75752 57.7791 8.69246C57.7421 8.66046 57.7055 8.6284 57.6736 8.59955C57.6612 8.58839 57.6462 8.57464 57.6301 8.5595M57.6301 8.5595C57.646 8.57168 57.6546 8.57849 57.6574 8.58083C57.6599 8.58285 57.6515 8.57615 57.6372 8.56354C57.6299 8.55715 57.6155 8.54439 57.5973 8.52693C57.5832 8.51334 57.545 8.47638 57.5002 8.42387L58.6409 7.44995L57.4987 8.42211C57.5528 8.48567 57.6038 8.53446 57.6158 8.5459L57.6171 8.54712C57.6215 8.55133 57.6258 8.55546 57.6301 8.5595ZM35.1616 10.4138L35.1619 10.4137C35.7408 10.1559 36.3695 10.1153 36.9051 10.1801C37.4477 10.2456 38.0294 10.4349 38.5285 10.7825L35.1616 10.4138ZM35.1616 10.4138C34.9468 10.5095 34.6725 10.6416 34.3649 10.8988C34.0914 11.1274 33.8392 11.4148 33.5652 11.7632C33.0229 12.4528 32.1739 13.6731 30.6322 15.898L30.6322 15.8981M35.1616 10.4138L30.6322 15.8981M30.6322 15.8981C24.8537 24.2373 22.22 28.2986 19.6917 32.7877L19.6917 32.7878M30.6322 15.8981L19.6917 32.7878M19.6917 32.7878C18.0376 35.7252 16.6348 39.8161 16.2811 42.8203C15.9277 45.8214 16.5096 49.6189 17.7471 52.5962M19.6917 32.7878L17.7471 52.5962M25.7325 60.268C24.6604 59.554 22.5732 57.5844 21.7393 56.4998C20.8563 55.3516 19.6686 53.3109 19.1323 52.0204C17.9841 49.2583 17.4501 45.7188 17.7708 42.9957L25.7325 60.268ZM25.7325 60.268C29.2149 62.5874 32.5357 63.6063 36.6078 63.6051M25.7325 60.268L36.6078 63.6051M17.7471 52.5962C18.3356 54.012 19.5903 56.1659 20.5502 57.4142C21.0397 58.0508 21.8377 58.8784 22.6171 59.6138C23.3934 60.3464 24.257 61.0876 24.901 61.5165L25.7017 60.3142L24.901 61.5165C28.6227 63.9952 32.2316 65.1064 36.6083 65.1051C40.0401 65.1039 42.5169 64.5034 45.7088 62.9172C50.3095 60.6307 53.9616 56.3536 55.7095 51.2845L55.7095 51.2845C56.4927 49.0132 56.798 47.2599 56.798 44.9679C56.798 38.5052 54.0749 32.8904 45.6787 20.7217C44.5871 19.1396 42.7025 16.4015 41.4912 14.6375L41.4912 14.6375C40.8768 13.7428 40.2722 12.8952 39.7906 12.2477C39.5508 11.9252 39.3346 11.6431 39.1593 11.4263C39.0725 11.319 38.9866 11.2162 38.9072 11.1282L38.9029 11.1233C38.8535 11.0684 38.71 10.9089 38.529 10.7828L17.7471 52.5962ZM36.6078 63.6051C39.7969 63.604 42.0462 63.0623 45.0412 61.5739M36.6078 63.6051L45.0412 61.5739M45.0412 61.5739C49.2673 59.4737 52.6636 55.5164 54.2915 50.7955L45.0412 61.5739ZM29.1391 58.1242C29.1419 58.1264 29.1431 58.1275 29.1429 58.1275C29.1428 58.1274 29.1415 58.1264 29.1391 58.1242ZM22.9379 52.1055C22.9391 52.1054 22.9403 52.1054 22.9416 52.1053C22.9223 52.1079 22.9193 52.107 22.9379 52.1055Z"
                      fill="#35A080"
                      stroke="black"
                      stroke-width="3"
                    />
                  </svg>

                  {/* <svg
                    width="73"
                    height="73"
                    viewBox="0 0 100% 100%"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <mask id="path-1-inside-1_451_3302" fill="white">
                      <path
                        fill-rule="evenodd"
                        clip-rule="evenodd"
                        d="M11.1 10.2801C17.2166 4.39912 24.9987 0.819335 33.1129 0.154119C33.9905 0.0821538 35.4948 0.0138484 36.4559 0.00226086C43.658 -0.0846457 51.3319 2.30605 57.3493 6.51126C58.0179 6.97842 58.5991 7.40091 58.6409 7.44985C58.6827 7.49894 59.2297 7.95772 59.8565 8.4694C61.2677 9.62129 63.9658 12.3549 65.0974 13.7792C68.9892 18.6777 71.5788 24.5392 72.6418 30.8556C73.0842 33.4846 73.1235 38.6142 72.7224 41.3759C71.9526 46.6754 69.9254 52.2055 67.2867 56.2035C61.7517 64.59 53.1466 70.4855 43.7674 72.3169C38.4876 73.3479 32.3732 73.2049 27.4147 71.9347C21.2353 70.3516 15.3646 66.9587 10.6931 62.271C8.45167 60.0218 7.18469 58.4478 5.60515 55.9509C4.54604 54.2765 2.86058 50.9938 2.58388 50.0665C2.50881 49.815 2.27587 49.1456 2.06633 48.5792C1.43846 46.8823 0.774278 44.3833 0.434817 42.4418C0.0198346 40.0674 -0.133789 35.2607 0.13152 32.9511C1.18181 23.8084 4.79311 16.3442 11.1 10.2801ZM31.8651 16.7524C34.9801 12.257 35.1257 12.0719 35.7721 11.7839C36.3134 11.5428 37.1391 11.6426 37.6715 12.0135C37.8804 12.159 39.0429 13.7219 40.2547 15.4866C41.4665 17.2514 43.3518 19.9905 44.444 21.5735C52.8579 33.7679 55.298 39.0271 55.298 44.9679C55.298 47.0835 55.0237 48.6718 54.2914 50.7955C52.6636 55.5163 49.2673 59.4736 45.0412 61.5739C42.0462 63.0623 39.7969 63.604 36.6078 63.6051C32.5357 63.6063 29.2149 62.5873 25.7325 60.268C24.6604 59.554 22.5732 57.5844 21.7393 56.4998C20.8563 55.3515 19.6686 53.3109 19.1323 52.0204C17.9841 49.2583 17.4501 45.7188 17.7708 42.9957C18.0982 40.2148 19.4281 36.3129 20.9987 33.5238C23.4915 29.0977 26.0926 25.083 31.8651 16.7524ZM38 26C38 25.1715 37.3285 24.5 36.5 24.5C35.6716 24.5 35 25.1715 35 26V51.8787L28.0148 44.8934C27.429 44.3076 26.4792 44.3076 25.8934 44.8934C25.3076 45.4792 25.3076 46.4289 25.8934 47.0147L35.4394 56.5606C36.0252 57.1464 36.9749 57.1464 37.5607 56.5606L47.1066 47.0147C47.6924 46.4289 47.6924 45.4792 47.1066 44.8934C46.5209 44.3076 45.5711 44.3076 44.9853 44.8934L38 51.8787V26Z"
                      />
                    </mask>
                    <path
                      fill-rule="evenodd"
                      clip-rule="evenodd"
                      d="M11.1 10.2801C17.2166 4.39912 24.9987 0.819335 33.1129 0.154119C33.9905 0.0821538 35.4948 0.0138484 36.4559 0.00226086C43.658 -0.0846457 51.3319 2.30605 57.3493 6.51126C58.0179 6.97842 58.5991 7.40091 58.6409 7.44985C58.6827 7.49894 59.2297 7.95772 59.8565 8.4694C61.2677 9.62129 63.9658 12.3549 65.0974 13.7792C68.9892 18.6777 71.5788 24.5392 72.6418 30.8556C73.0842 33.4846 73.1235 38.6142 72.7224 41.3759C71.9526 46.6754 69.9254 52.2055 67.2867 56.2035C61.7517 64.59 53.1466 70.4855 43.7674 72.3169C38.4876 73.3479 32.3732 73.2049 27.4147 71.9347C21.2353 70.3516 15.3646 66.9587 10.6931 62.271C8.45167 60.0218 7.18469 58.4478 5.60515 55.9509C4.54604 54.2765 2.86058 50.9938 2.58388 50.0665C2.50881 49.815 2.27587 49.1456 2.06633 48.5792C1.43846 46.8823 0.774278 44.3833 0.434817 42.4418C0.0198346 40.0674 -0.133789 35.2607 0.13152 32.9511C1.18181 23.8084 4.79311 16.3442 11.1 10.2801ZM31.8651 16.7524C34.9801 12.257 35.1257 12.0719 35.7721 11.7839C36.3134 11.5428 37.1391 11.6426 37.6715 12.0135C37.8804 12.159 39.0429 13.7219 40.2547 15.4866C41.4665 17.2514 43.3518 19.9905 44.444 21.5735C52.8579 33.7679 55.298 39.0271 55.298 44.9679C55.298 47.0835 55.0237 48.6718 54.2914 50.7955C52.6636 55.5163 49.2673 59.4736 45.0412 61.5739C42.0462 63.0623 39.7969 63.604 36.6078 63.6051C32.5357 63.6063 29.2149 62.5873 25.7325 60.268C24.6604 59.554 22.5732 57.5844 21.7393 56.4998C20.8563 55.3515 19.6686 53.3109 19.1323 52.0204C17.9841 49.2583 17.4501 45.7188 17.7708 42.9957C18.0982 40.2148 19.4281 36.3129 20.9987 33.5238C23.4915 29.0977 26.0926 25.083 31.8651 16.7524ZM38 26C38 25.1715 37.3285 24.5 36.5 24.5C35.6716 24.5 35 25.1715 35 26V51.8787L28.0148 44.8934C27.429 44.3076 26.4792 44.3076 25.8934 44.8934C25.3076 45.4792 25.3076 46.4289 25.8934 47.0147L35.4394 56.5606C36.0252 57.1464 36.9749 57.1464 37.5607 56.5606L47.1066 47.0147C47.6924 46.4289 47.6924 45.4792 47.1066 44.8934C46.5209 44.3076 45.5711 44.3076 44.9853 44.8934L38 51.8787V26Z"
                      fill="#FF0000"
                    />
                    <path
                      d="M33.1129 0.154119L33.3581 3.14409L33.3581 3.14408L33.1129 0.154119ZM11.1 10.2801L9.02078 8.11755L9.02077 8.11756L11.1 10.2801ZM36.4559 0.00226086L36.4921 3.00204L36.4921 3.00204L36.4559 0.00226086ZM57.3493 6.51126L55.6309 8.9703L55.6311 8.97042L57.3493 6.51126ZM58.6409 7.44985L60.9255 5.50539L60.9225 5.50189L58.6409 7.44985ZM59.8565 8.4694L57.9594 10.7934L57.9595 10.7935L59.8565 8.4694ZM65.0974 13.7792L62.7484 15.6454L62.7485 15.6454L65.0974 13.7792ZM72.6418 30.8556L75.6002 30.3579L75.6002 30.3577L72.6418 30.8556ZM72.7224 41.3759L69.7535 40.9446L69.7535 40.9446L72.7224 41.3759ZM67.2867 56.2035L69.7906 57.856L69.7906 57.856L67.2867 56.2035ZM43.7674 72.3169L43.1924 69.3725L43.1924 69.3725L43.7674 72.3169ZM27.4147 71.9347L26.6702 74.8408L26.6703 74.8408L27.4147 71.9347ZM10.6931 62.271L12.8181 60.1533L12.8181 60.1533L10.6931 62.271ZM5.60515 55.9509L3.06977 57.5546L3.06984 57.5547L5.60515 55.9509ZM2.58388 50.0665L-0.290877 50.9243L-0.290866 50.9244L2.58388 50.0665ZM2.06633 48.5792L4.87997 47.5383L4.87992 47.5382L2.06633 48.5792ZM0.434817 42.4418L-2.52039 42.9583L-2.52035 42.9585L0.434817 42.4418ZM0.13152 32.9511L-2.84888 32.6087L-2.84888 32.6088L0.13152 32.9511ZM35.7721 11.7839L34.5516 9.04339L34.5511 9.04359L35.7721 11.7839ZM31.8651 16.7524L29.3993 15.0437L29.3992 15.0437L31.8651 16.7524ZM37.6715 12.0135L35.9566 14.475L35.9575 14.4756L37.6715 12.0135ZM40.2547 15.4866L42.7278 13.7884L42.7277 13.7883L40.2547 15.4866ZM44.444 21.5735L41.9747 23.2772L41.9748 23.2773L44.444 21.5735ZM54.2914 50.7955L57.1276 51.7734L57.1276 51.7734L54.2914 50.7955ZM45.0412 61.5739L46.3763 64.2604L46.3763 64.2604L45.0412 61.5739ZM36.6078 63.6051L36.6087 66.6051L36.6088 66.6051L36.6078 63.6051ZM25.7325 60.268L24.0694 62.7649L24.0695 62.7649L25.7325 60.268ZM21.7393 56.4998L24.1176 54.6712L24.1174 54.671L21.7393 56.4998ZM19.1323 52.0204L21.9025 50.869L21.9025 50.8689L19.1323 52.0204ZM17.7708 42.9957L14.7913 42.6449L14.7913 42.6449L17.7708 42.9957ZM20.9987 33.5238L18.3847 32.0516L18.3846 32.0518L20.9987 33.5238ZM35 51.8787L32.8787 54L38 59.1213V51.8787H35ZM28.0148 44.8934L25.8934 47.0147L25.8934 47.0147L28.0148 44.8934ZM25.8934 44.8934L28.0148 47.0147L28.0148 47.0147L25.8934 44.8934ZM25.8934 47.0147L23.7721 49.136L23.7721 49.136L25.8934 47.0147ZM47.1066 44.8934L44.9853 47.0147L44.9853 47.0147L47.1066 44.8934ZM44.9853 44.8934L47.1066 47.0147L47.1066 47.0147L44.9853 44.8934ZM38 51.8787H35V59.1213L40.1214 54L38 51.8787ZM32.8678 -2.83585C24.0343 -2.11167 15.6125 1.77972 9.02078 8.11755L13.1793 12.4427C18.8207 7.01852 25.963 3.75034 33.3581 3.14409L32.8678 -2.83585ZM36.4197 -2.99752C35.3952 -2.98517 33.8209 -2.91401 32.8677 -2.83584L33.3581 3.14408C34.1601 3.07832 35.5944 3.01287 36.4921 3.00204L36.4197 -2.99752ZM59.0678 4.05222C52.5469 -0.504781 44.2616 -3.09215 36.4197 -2.99752L36.4921 3.00204C43.0543 2.92286 50.1168 5.11688 55.6309 8.9703L59.0678 4.05222ZM60.9225 5.50189C60.768 5.32093 60.6203 5.19434 60.6063 5.1821C60.5575 5.1392 60.5145 5.10397 60.4877 5.08229C60.4321 5.03733 60.3759 4.99403 60.3302 4.95931C60.2351 4.88708 60.1183 4.80103 59.9939 4.71058C59.7416 4.52721 59.4136 4.29381 59.0676 4.05209L55.6311 8.97042C55.9537 9.19587 56.2506 9.40729 56.4665 9.56419C56.5761 9.64387 56.6543 9.70182 56.7008 9.73717C56.7259 9.75624 56.7272 9.75763 56.714 9.74697C56.7084 9.74243 56.6828 9.72175 56.6474 9.69065C56.6295 9.67492 56.598 9.64679 56.5592 9.60962C56.5285 9.5802 56.4504 9.50437 56.3594 9.39781L60.9225 5.50189ZM61.7537 6.14542C61.4481 5.89596 61.1652 5.662 60.9572 5.48757C60.852 5.39939 60.7733 5.33247 60.7229 5.28887C60.6964 5.26601 60.6879 5.25827 60.6912 5.26125C60.6922 5.26215 60.7072 5.27567 60.7296 5.29712C60.7409 5.30798 60.7617 5.32808 60.7877 5.35462C60.8082 5.37549 60.8615 5.43022 60.9255 5.5054L56.3564 9.3943C56.4664 9.52359 56.5679 9.61926 56.5796 9.63041C56.6149 9.66423 56.6465 9.69314 56.6677 9.71228C56.7114 9.75174 56.7573 9.7919 56.7978 9.82694C56.8813 9.89917 56.9863 9.98812 57.1015 10.0847C57.3342 10.2799 57.6382 10.5312 57.9594 10.7934L61.7537 6.14542ZM67.4463 11.9131C66.1808 10.3201 63.3312 7.43305 61.7536 6.14534L57.9595 10.7935C59.2043 11.8095 61.7508 14.3896 62.7484 15.6454L67.4463 11.9131ZM75.6002 30.3577C74.4551 23.5534 71.6614 17.2185 67.4463 11.913L62.7485 15.6454C66.3169 20.1369 68.7025 25.5249 69.6834 31.3535L75.6002 30.3577ZM75.6912 41.8071C76.135 38.7516 76.0966 33.3082 75.6002 30.3579L69.6834 31.3534C70.0717 33.6611 70.112 38.4769 69.7535 40.9446L75.6912 41.8071ZM69.7906 57.856C72.6994 53.4487 74.8656 47.4911 75.6912 41.8071L69.7535 40.9446C69.0396 45.8596 67.1514 50.9623 64.7829 54.551L69.7906 57.856ZM44.3423 75.2613C54.5561 73.2669 63.8375 66.8759 69.7906 57.856L64.7829 54.551C59.6659 62.304 51.7371 67.704 43.1924 69.3725L44.3423 75.2613ZM26.6703 74.8408C32.0822 76.2272 38.6482 76.3732 44.3423 75.2613L43.1924 69.3725C38.3271 70.3226 32.6642 70.1826 28.1592 69.0285L26.6703 74.8408ZM8.56811 64.3886C13.6055 69.4436 19.9479 73.1187 26.6702 74.8408L28.1592 69.0285C22.5226 67.5845 17.1237 64.4739 12.8181 60.1533L8.56811 64.3886ZM3.06984 57.5547C4.77526 60.2506 6.18292 61.9951 8.56814 64.3886L12.8181 60.1533C10.7204 58.0484 9.59413 56.645 8.14046 54.3471L3.06984 57.5547ZM-0.290866 50.9244C-0.0585346 51.703 0.572793 53.009 1.13234 54.0988C1.74108 55.2844 2.4731 56.6113 3.06977 57.5546L8.14053 54.3472C7.67809 53.6161 7.03783 52.4644 6.46989 51.3583C6.18955 50.8123 5.94005 50.3031 5.74947 49.8885C5.65408 49.681 5.57922 49.5098 5.52488 49.3775C5.46474 49.231 5.45134 49.1843 5.45862 49.2087L-0.290866 50.9244ZM-0.747309 49.6201C-0.538925 50.1834 -0.335851 50.7736 -0.290877 50.9243L5.45863 49.2088C5.35348 48.8563 5.09067 48.1079 4.87997 47.5383L-0.747309 49.6201ZM-2.52035 42.9585C-2.15242 45.0628 -1.44343 47.7387 -0.747262 49.6202L4.87992 47.5382C4.32035 46.0258 3.70098 43.7038 3.38999 41.9251L-2.52035 42.9585ZM-2.84888 32.6088C-3.14824 35.2148 -2.9831 40.3108 -2.52039 42.9583L3.39002 41.9253C3.02276 39.824 2.88066 35.3066 3.11192 33.2935L-2.84888 32.6088ZM9.02077 8.11756C2.18348 14.6916 -1.72343 22.8118 -2.84888 32.6087L3.11192 33.2935C4.08706 24.805 7.40274 17.9968 13.1793 12.4426L9.02077 8.11756ZM34.5511 9.04359C34.2832 9.16299 33.8648 9.36171 33.4028 9.74794C33.009 10.0771 32.6807 10.4613 32.3861 10.836C31.8081 11.5711 30.9253 12.8415 29.3993 15.0437L34.3309 18.461C35.92 16.1679 36.6675 15.0981 37.1025 14.5448C37.3145 14.2752 37.3385 14.2782 37.2512 14.3512C37.0956 14.4812 36.9378 14.5488 36.9931 14.5242L34.5511 9.04359ZM39.3864 9.55201C38.6543 9.0419 37.8299 8.78089 37.085 8.69087C36.3544 8.60258 35.4388 8.64827 34.5516 9.04339L36.9926 14.5244C36.8051 14.6079 36.6549 14.6359 36.5677 14.646C36.4771 14.6565 36.4103 14.653 36.3652 14.6475C36.3016 14.6398 36.1563 14.6142 35.9566 14.475L39.3864 9.55201ZM42.7277 13.7883C42.1049 12.8813 41.4891 12.0179 40.9942 11.3525C40.7487 11.0223 40.519 10.7223 40.3258 10.4832C40.2309 10.3658 40.1262 10.2401 40.0217 10.1241C39.9862 10.0847 39.7334 9.79351 39.3856 9.55139L35.9575 14.4756C35.7648 14.3415 35.6412 14.2186 35.6225 14.2004C35.6011 14.1794 35.5858 14.1635 35.5776 14.1549C35.5691 14.1459 35.5644 14.1407 35.5639 14.1401C35.5635 14.1397 35.5717 14.1488 35.5899 14.1705C35.6076 14.1914 35.6308 14.2195 35.6599 14.2555C35.7813 14.4056 35.9572 14.6338 36.1798 14.9332C36.6213 15.5268 37.1927 16.3272 37.7817 17.1848L42.7277 13.7883ZM46.9133 19.8699C45.8224 18.2887 43.9384 15.5515 42.7278 13.7884L37.7816 17.1847C38.9946 18.9513 40.8812 21.6922 41.9747 23.2772L46.9133 19.8699ZM58.298 44.9679C58.298 37.9831 55.2918 32.0129 46.9133 19.8698L41.9748 23.2773C50.424 35.5229 52.298 40.0711 52.298 44.9679H58.298ZM57.1276 51.7734C57.9616 49.3545 58.298 47.4363 58.298 44.9679H52.298C52.298 46.7307 52.0858 47.989 51.4553 49.8176L57.1276 51.7734ZM46.3763 64.2604C51.3517 61.7878 55.2595 57.1908 57.1276 51.7734L51.4553 49.8175C50.0676 53.8419 47.1828 57.1595 43.7061 58.8873L46.3763 64.2604ZM36.6088 66.6051C40.2834 66.6038 42.9875 65.9445 46.3763 64.2604L43.7061 58.8873C41.1049 60.18 39.3103 60.6042 36.6068 60.6051L36.6088 66.6051ZM24.0695 62.7649C28.0304 65.4029 31.9274 66.6065 36.6087 66.6051L36.6069 60.6051C33.1439 60.6061 30.3994 59.7718 27.3954 57.7711L24.0695 62.7649ZM19.361 58.3283C19.923 59.0593 20.7888 59.9509 21.5876 60.7048C22.3801 61.4526 23.3176 62.2641 24.0694 62.7649L27.3955 57.7711C27.0753 57.5579 26.4332 57.0276 25.7056 56.341C24.9843 55.6604 24.3895 55.0249 24.1176 54.6712L19.361 58.3283ZM16.362 53.1719C17.0026 54.713 18.3243 56.9802 19.3612 58.3286L24.1174 54.671C23.3883 53.7228 22.3347 51.9088 21.9025 50.869L16.362 53.1719ZM14.7913 42.6449C14.4052 45.924 15.035 49.9795 16.3621 53.1719L21.9025 50.8689C20.9332 48.5371 20.495 45.5135 20.7502 43.3465L14.7913 42.6449ZM18.3846 32.0518C16.6471 35.1375 15.1714 39.4172 14.7913 42.6449L20.7502 43.3465C21.025 41.0124 22.2091 37.4883 23.6127 34.9958L18.3846 32.0518ZM29.3992 15.0437C23.6148 23.3915 20.9485 27.4994 18.3847 32.0516L23.6126 34.996C26.0344 30.6959 28.5703 26.7746 34.331 18.461L29.3992 15.0437ZM36.5 27.5C35.6716 27.5 35 26.8284 35 26H41C41 23.5147 38.9853 21.5 36.5 21.5V27.5ZM38 26C38 26.8284 37.3285 27.5 36.5 27.5V21.5C34.0148 21.5 32 23.5147 32 26H38ZM38 51.8787V26H32V51.8787H38ZM25.8934 47.0147L32.8787 54L37.1214 49.7573L30.1361 42.7721L25.8934 47.0147ZM28.0148 47.0147C27.429 47.6005 26.4792 47.6005 25.8934 47.0147L30.1361 42.7721C28.3787 41.0147 25.5295 41.0147 23.7721 42.7721L28.0148 47.0147ZM28.0148 44.8934C28.6005 45.4792 28.6005 46.4289 28.0148 47.0147L23.7721 42.772C22.0148 44.5294 22.0148 47.3787 23.7721 49.136L28.0148 44.8934ZM37.5607 54.4393L28.0148 44.8934L23.7721 49.136L33.3181 58.682L37.5607 54.4393ZM35.4394 54.4393C36.0252 53.8535 36.9749 53.8535 37.5607 54.4393L33.3181 58.682C35.0754 60.4393 37.9247 60.4393 39.682 58.682L35.4394 54.4393ZM44.9853 44.8934L35.4394 54.4393L39.682 58.682L49.228 49.136L44.9853 44.8934ZM44.9853 47.0147C44.3995 46.4289 44.3995 45.4792 44.9853 44.8934L49.228 49.136C50.9853 47.3787 50.9853 44.5294 49.228 42.772L44.9853 47.0147ZM47.1066 47.0147C46.5209 47.6005 45.5711 47.6005 44.9853 47.0147L49.228 42.7721C47.4706 41.0147 44.6214 41.0147 42.864 42.7721L47.1066 47.0147ZM40.1214 54L47.1066 47.0147L42.864 42.7721L35.8787 49.7573L40.1214 54ZM35 26V51.8787H41V26H35Z"
                      fill="black"
                      mask="url(#path-1-inside-1_451_3302)"
                    />
                  </svg> */}
                </div>
                <div className={"sensor__dissolved-oxygen "}>
                  <h2>Dissolved O2</h2>
                  <svg
                    width="106"
                    height="104"
                    viewBox="0 0 98 98"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fill-rule="evenodd"
                      clip-rule="evenodd"
                      d="M75.1855 18.2897C82.1126 23.1987 87.1816 30.2822 89.5774 38.4024C91.9731 46.5225 91.5557 55.2046 88.3967 63.0544C85.4861 70.287 80.0455 78.5253 72.207 83.0279C68.8547 84.9535 64.5641 83.8039 62.6238 80.4601C60.6834 77.1164 61.828 72.8447 65.1803 70.919C69.3391 68.5301 73.137 63.3932 75.3757 57.8302C77.366 52.8844 77.6268 47.4205 76.1206 42.3155C74.6145 37.2107 71.4281 32.7573 67.0715 29.6699C62.7146 26.5823 57.4378 25.0386 52.0868 25.2913C46.7355 25.5441 41.623 27.5789 37.5718 31.07C33.5208 34.5611 30.7689 39.3031 29.7546 44.532C28.7405 49.7606 29.5221 55.1732 31.9707 59.9021C34.4194 64.631 38.3949 68.4057 43.2615 70.6189C46.788 72.2226 48.3481 76.3677 46.746 79.8773C45.1439 83.3868 40.9864 84.9318 37.4599 83.3281C29.727 79.8115 23.4036 73.8101 19.5078 66.2863C15.612 58.7625 14.3716 50.1567 15.9825 41.8519C17.5933 33.5475 21.9614 26.0264 28.3818 20.4935C34.8021 14.9608 42.9053 11.7345 51.3917 11.3337C59.8785 10.9329 68.2588 13.381 75.1855 18.2897Z"
                      fill="white"
                      stroke="black"
                      stroke-linecap="round"
                    />
                    <g filter="url(#filter0_d_424_2436)">
                      <path
                        fill-rule="evenodd"
                        clip-rule="evenodd"
                        d="M75.6939 18.1397C82.8005 23.1564 87.5399 30.4787 89.8708 38.4116C90.9595 42.117 88.8287 45.9935 85.1115 47.0699C81.3943 48.1463 77.4983 46.0151 76.4096 42.3097C74.8523 37.0095 71.8021 32.5005 67.6009 29.5348C63.238 26.4549 57.9426 24.917 52.5608 25.1818C47.1779 25.4466 42.0282 27.4996 37.9431 31.0137C33.8582 34.5274 31.0832 39.2905 30.0537 44.5304C29.0244 49.769 29.7986 55.1818 32.2421 59.9036C34.6856 64.6252 38.6624 68.3931 43.5414 70.5985C47.0716 72.1941 48.6412 76.3357 47.0472 79.8489C45.4532 83.3622 41.2993 84.9167 37.7691 83.321C30.0148 79.816 23.6759 73.8175 19.7777 66.2849C15.8796 58.7523 14.654 50.1339 16.288 41.8172C17.9218 33.5018 22.3186 25.972 28.7625 20.4289C35.2061 14.8862 43.3314 11.644 51.8381 11.2255C60.3459 10.8069 68.7489 13.2371 75.6939 18.1397Z"
                        fill="black"
                      />
                    </g>
                    <g filter="url(#filter1_d_424_2436)">
                      <ellipse
                        cx="82.8796"
                        cy="40.5002"
                        rx="2.64617"
                        ry="2.63274"
                        fill="white"
                      />
                    </g>
                    <path
                      d="M39.5942 55.3518C36.6499 55.3518 34.3559 53.2688 34.3559 48.804V48.7864C34.3559 44.5413 36.3598 42.0188 39.603 42.0188C42.0552 42.0188 43.8833 43.469 44.27 45.4553L44.2876 45.5432H41.6948L41.6596 45.4641C41.3608 44.6731 40.6401 44.137 39.6118 44.137C37.7749 44.137 36.9751 45.9387 36.8784 48.2415C36.8696 48.3381 36.8696 48.4348 36.8696 48.5315H37.0454C37.5024 47.5471 38.5659 46.677 40.3149 46.677C42.7846 46.677 44.4546 48.4348 44.4546 50.8342V50.8518C44.4546 53.4446 42.4507 55.3518 39.5942 55.3518ZM37.2651 50.887C37.2651 52.2229 38.2846 53.2512 39.5766 53.2512C40.8598 53.2512 41.8882 52.2405 41.8882 50.9397V50.9221C41.8882 49.595 40.9214 48.6282 39.5942 48.6282C38.2846 48.6282 37.2651 49.5686 37.2651 50.8782V50.887ZM51.2448 55.3518C48.529 55.3518 46.736 53.7346 46.5866 51.6165L46.5778 51.4934H48.986L49.0036 51.5549C49.1882 52.4866 50.0583 53.2336 51.2536 53.2336C52.6159 53.2336 53.5651 52.2756 53.5651 50.9133V50.8958C53.5651 49.5422 52.6071 48.6018 51.2624 48.6018C50.6208 48.6018 50.0759 48.7864 49.654 49.1467C49.4167 49.3401 49.2057 49.5774 49.0651 49.8499H46.7888L47.3776 42.344H55.3054V44.4534H49.443L49.1266 48.0657H49.2848C49.7946 47.2131 50.779 46.6858 51.9919 46.6858C54.3561 46.6858 56.0612 48.426 56.0612 50.843V50.8606C56.0612 53.5325 54.0925 55.3518 51.2448 55.3518ZM60.8212 49.2961C58.9667 49.2961 57.8241 47.925 57.8241 45.7278V45.719C57.8241 43.5217 58.9667 42.1594 60.8212 42.1594C62.6845 42.1594 63.8183 43.5217 63.8183 45.719V45.7278C63.8183 47.925 62.6845 49.2961 60.8212 49.2961ZM62.7724 55.0266H60.7421L69.2763 42.344H71.3065L62.7724 55.0266ZM60.8212 47.8899C61.5946 47.8899 62.0253 47.1077 62.0253 45.7278V45.719C62.0253 44.3303 61.5946 43.5657 60.8212 43.5657C60.0565 43.5657 59.6259 44.3303 59.6259 45.719V45.7278C59.6259 47.1077 60.0565 47.8899 60.8212 47.8899ZM71.2186 55.2112C69.3642 55.2112 68.2216 53.8401 68.2216 51.6428V51.634C68.2216 49.4368 69.3642 48.0745 71.2186 48.0745C73.0819 48.0745 74.2157 49.4368 74.2157 51.634V51.6428C74.2157 53.8401 73.0819 55.2112 71.2186 55.2112ZM71.2186 53.8049C71.9921 53.8049 72.4227 53.0227 72.4227 51.6428V51.634C72.4227 50.2454 71.9921 49.4807 71.2186 49.4807C70.454 49.4807 70.0233 50.2454 70.0233 51.634V51.6428C70.0233 53.0227 70.454 53.8049 71.2186 53.8049Z"
                      fill="black"
                    />
                    <defs>
                      <filter
                        id="filter0_d_424_2436"
                        x="0.583496"
                        y="1.1792"
                        width="104.572"
                        height="102.769"
                        filterUnits="userSpaceOnUse"
                        color-interpolation-filters="sRGB"
                      >
                        <feFlood
                          flood-opacity="0"
                          result="BackgroundImageFix"
                        />
                        <feColorMatrix
                          in="SourceAlpha"
                          type="matrix"
                          values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                          result="hardAlpha"
                        />
                        <feOffset dy="5" />
                        <feGaussianBlur stdDeviation="7.5" />
                        <feColorMatrix
                          type="matrix"
                          values="0 0 0 0 0.505882 0 0 0 0 0.831373 0 0 0 0 0.996078 0 0 0 0.2 0"
                        />
                        <feBlend
                          mode="normal"
                          in2="BackgroundImageFix"
                          result="effect1_dropShadow_424_2436"
                        />
                        <feBlend
                          mode="normal"
                          in="SourceGraphic"
                          in2="effect1_dropShadow_424_2436"
                          result="shape"
                        />
                      </filter>
                      <filter
                        id="filter1_d_424_2436"
                        x="79.2334"
                        y="36.8674"
                        width="7.29248"
                        height="7.26538"
                        filterUnits="userSpaceOnUse"
                        color-interpolation-filters="sRGB"
                      >
                        <feFlood
                          flood-opacity="0"
                          result="BackgroundImageFix"
                        />
                        <feColorMatrix
                          in="SourceAlpha"
                          type="matrix"
                          values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                          result="hardAlpha"
                        />
                        <feOffset />
                        <feGaussianBlur stdDeviation="0.5" />
                        <feColorMatrix
                          type="matrix"
                          values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"
                        />
                        <feBlend
                          mode="normal"
                          in2="BackgroundImageFix"
                          result="effect1_dropShadow_424_2436"
                        />
                        <feBlend
                          mode="normal"
                          in="SourceGraphic"
                          in2="effect1_dropShadow_424_2436"
                          result="shape"
                        />
                      </filter>
                    </defs>
                  </svg>
                </div>
                {/* <div className={"sensor__power " + powerStatusClass}>
                  <h2>Power {powerString}</h2>
                </div> */}
              </div>
            </section>
          )}
          {!selectedTank && (
            <TankList tankList={tankList} onItemClick={handleTankClick} />
          )}
        </div>
      </div>
    </div>
  );
};

export default App;
